# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
  author(where: UserWhereInput): User!
}

type Registry implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  direction: String
  locations: [String!]
  price: Int
  spaces: Int
  operation: String!
  categories: [String!]
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense!]
  images: [String!]
  amenities(where: AmenityWhereInput, orderBy: AmenityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Amenity!]
  featured: Boolean
  summary(where: SummaryWhereInput, orderBy: SummaryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Summary!]
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}


#
# Other Types
#

type AggregateAmenity {
  count: Int!
}

type AggregateExpense {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateRegistry {
  count: Int!
}

type AggregateSummary {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Amenity {
  description: String
  icon: String
  type: String!
}

type AmenityConnection {
  pageInfo: PageInfo!
  edges: [AmenityEdge]!
  aggregate: AggregateAmenity!
}

input AmenityCreateInput {
  description: String
  icon: String
  type: String!
}

input AmenityCreateManyInput {
  create: [AmenityCreateInput!]
}

type AmenityEdge {
  node: Amenity!
  cursor: String!
}

enum AmenityOrderByInput {
  description_ASC
  description_DESC
  icon_ASC
  icon_DESC
  type_ASC
  type_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AmenityPreviousValues {
  description: String
  icon: String
  type: String!
}

type AmenitySubscriptionPayload {
  mutation: MutationType!
  node: Amenity
  updatedFields: [String!]
  previousValues: AmenityPreviousValues
}

input AmenitySubscriptionWhereInput {
  AND: [AmenitySubscriptionWhereInput!]
  OR: [AmenitySubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AmenityWhereInput
}

input AmenityUpdateInput {
  description: String
  icon: String
  type: String
}

input AmenityUpdateManyInput {
  create: [AmenityCreateInput!]
}

input AmenityWhereInput {
  AND: [AmenityWhereInput!]
  OR: [AmenityWhereInput!]
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  icon: String
  icon_not: String
  icon_in: [String!]
  icon_not_in: [String!]
  icon_lt: String
  icon_lte: String
  icon_gt: String
  icon_gte: String
  icon_contains: String
  icon_not_contains: String
  icon_starts_with: String
  icon_not_starts_with: String
  icon_ends_with: String
  icon_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Expense {
  name: String!
  price: Int
}

type ExpenseConnection {
  pageInfo: PageInfo!
  edges: [ExpenseEdge]!
  aggregate: AggregateExpense!
}

input ExpenseCreateInput {
  name: String!
  price: Int
}

input ExpenseCreateManyInput {
  create: [ExpenseCreateInput!]
}

type ExpenseEdge {
  node: Expense!
  cursor: String!
}

enum ExpenseOrderByInput {
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ExpensePreviousValues {
  name: String!
  price: Int
}

type ExpenseSubscriptionPayload {
  mutation: MutationType!
  node: Expense
  updatedFields: [String!]
  previousValues: ExpensePreviousValues
}

input ExpenseSubscriptionWhereInput {
  AND: [ExpenseSubscriptionWhereInput!]
  OR: [ExpenseSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExpenseWhereInput
}

input ExpenseUpdateInput {
  name: String
  price: Int
}

input ExpenseUpdateManyInput {
  create: [ExpenseCreateInput!]
}

input ExpenseWhereInput {
  AND: [ExpenseWhereInput!]
  OR: [ExpenseWhereInput!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
}

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserCreateInput!): User!
  createRegistry(data: RegistryCreateInput!): Registry!
  createAmenity(data: AmenityCreateInput!): Amenity!
  createExpense(data: ExpenseCreateInput!): Expense!
  createSummary(data: SummaryCreateInput!): Summary!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateRegistry(data: RegistryUpdateInput!, where: RegistryWhereUniqueInput!): Registry
  deletePost(where: PostWhereUniqueInput!): Post
  deleteUser(where: UserWhereUniqueInput!): User
  deleteRegistry(where: RegistryWhereUniqueInput!): Registry
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertRegistry(where: RegistryWhereUniqueInput!, create: RegistryCreateInput!, update: RegistryUpdateInput!): Registry!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyRegistries(data: RegistryUpdateInput!, where: RegistryWhereInput!): BatchPayload!
  updateManyAmenities(data: AmenityUpdateInput!, where: AmenityWhereInput!): BatchPayload!
  updateManyExpenses(data: ExpenseUpdateInput!, where: ExpenseWhereInput!): BatchPayload!
  updateManySummaries(data: SummaryUpdateInput!, where: SummaryWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyRegistries(where: RegistryWhereInput!): BatchPayload!
  deleteManyAmenities(where: AmenityWhereInput!): BatchPayload!
  deleteManyExpenses(where: ExpenseWhereInput!): BatchPayload!
  deleteManySummaries(where: SummaryWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
  author: UserCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  isPublished: Boolean
  title: String!
  text: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
  author: UserUpdateOneWithoutPostsInput
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithoutAuthorInput!]
  upsert: [PostUpsertWithoutAuthorInput!]
}

input PostUpdateWithoutAuthorDataInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostUpdateWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  author: UserWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  registries(where: RegistryWhereInput, orderBy: RegistryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Registry]!
  amenities(where: AmenityWhereInput, orderBy: AmenityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Amenity]!
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense]!
  summaries(where: SummaryWhereInput, orderBy: SummaryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Summary]!
  post(where: PostWhereUniqueInput!): Post
  user(where: UserWhereUniqueInput!): User
  registry(where: RegistryWhereUniqueInput!): Registry
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  registriesConnection(where: RegistryWhereInput, orderBy: RegistryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RegistryConnection!
  amenitiesConnection(where: AmenityWhereInput, orderBy: AmenityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AmenityConnection!
  expensesConnection(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExpenseConnection!
  summariesConnection(where: SummaryWhereInput, orderBy: SummaryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SummaryConnection!
  node(id: ID!): Node
}

type RegistryConnection {
  pageInfo: PageInfo!
  edges: [RegistryEdge]!
  aggregate: AggregateRegistry!
}

input RegistryCreatecategoriesInput {
  set: [String!]
}

input RegistryCreateimagesInput {
  set: [String!]
}

input RegistryCreateInput {
  name: String!
  description: String
  direction: String
  price: Int
  spaces: Int
  operation: String!
  featured: Boolean
  locations: RegistryCreatelocationsInput
  categories: RegistryCreatecategoriesInput
  images: RegistryCreateimagesInput
  expenses: ExpenseCreateManyInput
  amenities: AmenityCreateManyInput
  summary: SummaryCreateManyInput
}

input RegistryCreatelocationsInput {
  set: [String!]
}

type RegistryEdge {
  node: Registry!
  cursor: String!
}

enum RegistryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  direction_ASC
  direction_DESC
  price_ASC
  price_DESC
  spaces_ASC
  spaces_DESC
  operation_ASC
  operation_DESC
  featured_ASC
  featured_DESC
}

type RegistryPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  direction: String
  locations: [String!]
  price: Int
  spaces: Int
  operation: String!
  categories: [String!]
  images: [String!]
  featured: Boolean
}

type RegistrySubscriptionPayload {
  mutation: MutationType!
  node: Registry
  updatedFields: [String!]
  previousValues: RegistryPreviousValues
}

input RegistrySubscriptionWhereInput {
  AND: [RegistrySubscriptionWhereInput!]
  OR: [RegistrySubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RegistryWhereInput
}

input RegistryUpdatecategoriesInput {
  set: [String!]
}

input RegistryUpdateimagesInput {
  set: [String!]
}

input RegistryUpdateInput {
  name: String
  description: String
  direction: String
  price: Int
  spaces: Int
  operation: String
  featured: Boolean
  locations: RegistryUpdatelocationsInput
  categories: RegistryUpdatecategoriesInput
  images: RegistryUpdateimagesInput
  expenses: ExpenseUpdateManyInput
  amenities: AmenityUpdateManyInput
  summary: SummaryUpdateManyInput
}

input RegistryUpdatelocationsInput {
  set: [String!]
}

input RegistryWhereInput {
  AND: [RegistryWhereInput!]
  OR: [RegistryWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  direction: String
  direction_not: String
  direction_in: [String!]
  direction_not_in: [String!]
  direction_lt: String
  direction_lte: String
  direction_gt: String
  direction_gte: String
  direction_contains: String
  direction_not_contains: String
  direction_starts_with: String
  direction_not_starts_with: String
  direction_ends_with: String
  direction_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  spaces: Int
  spaces_not: Int
  spaces_in: [Int!]
  spaces_not_in: [Int!]
  spaces_lt: Int
  spaces_lte: Int
  spaces_gt: Int
  spaces_gte: Int
  operation: String
  operation_not: String
  operation_in: [String!]
  operation_not_in: [String!]
  operation_lt: String
  operation_lte: String
  operation_gt: String
  operation_gte: String
  operation_contains: String
  operation_not_contains: String
  operation_starts_with: String
  operation_not_starts_with: String
  operation_ends_with: String
  operation_not_ends_with: String
  featured: Boolean
  featured_not: Boolean
  expenses_every: ExpenseWhereInput
  expenses_some: ExpenseWhereInput
  expenses_none: ExpenseWhereInput
  amenities_every: AmenityWhereInput
  amenities_some: AmenityWhereInput
  amenities_none: AmenityWhereInput
  summary_every: SummaryWhereInput
  summary_some: SummaryWhereInput
  summary_none: SummaryWhereInput
}

input RegistryWhereUniqueInput {
  id: ID
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  registry(where: RegistrySubscriptionWhereInput): RegistrySubscriptionPayload
  amenity(where: AmenitySubscriptionWhereInput): AmenitySubscriptionPayload
  expense(where: ExpenseSubscriptionWhereInput): ExpenseSubscriptionPayload
  summary(where: SummarySubscriptionWhereInput): SummarySubscriptionPayload
}

type Summary {
  name: String!
  value: String!
}

type SummaryConnection {
  pageInfo: PageInfo!
  edges: [SummaryEdge]!
  aggregate: AggregateSummary!
}

input SummaryCreateInput {
  name: String!
  value: String!
}

input SummaryCreateManyInput {
  create: [SummaryCreateInput!]
}

type SummaryEdge {
  node: Summary!
  cursor: String!
}

enum SummaryOrderByInput {
  name_ASC
  name_DESC
  value_ASC
  value_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SummaryPreviousValues {
  name: String!
  value: String!
}

type SummarySubscriptionPayload {
  mutation: MutationType!
  node: Summary
  updatedFields: [String!]
  previousValues: SummaryPreviousValues
}

input SummarySubscriptionWhereInput {
  AND: [SummarySubscriptionWhereInput!]
  OR: [SummarySubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SummaryWhereInput
}

input SummaryUpdateInput {
  name: String
  value: String
}

input SummaryUpdateManyInput {
  create: [SummaryCreateInput!]
}

input SummaryWhereInput {
  AND: [SummaryWhereInput!]
  OR: [SummaryWhereInput!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  email: String!
  password: String!
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  password: String
  name: String
}

input UserUpdateWithoutPostsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPostsDataInput!
}

input UserUpsertWithoutPostsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
